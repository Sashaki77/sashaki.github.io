# -*- coding: utf-8 -*-
"""Tugas Besar Sistem Cerdas Kelompok 14 IT-43-01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/103L-JyEhGREqAjxWLjuU-IOhyNcwWXNe
"""

import random
import math
import numpy as np
import pandas as pd
import pandas_datareader as web
import copy

"""Import Data"""

import io
data = web.DataReader('SBUX', data_source='yahoo', start='2020-11-01', end='2021-04-01')
data

"""# Membentuk array dari data diatas"""

lst = []
for i in range(100): #data harga penutupan saham Starbucks dalam 100 hari
    saham =[]
    saham = data['Close'][i]
    lst.append(saham)
lst

"""# Populasi"""

def population(popsize):
  pop = []
  n = 6 #panjang array kromosom
  i = 0
  while i < popsize :
    krom = []
    j = 0 
    while j < n:
      krom.append(random.randint(0,1))
      j = j + 1
    pop.append(krom) 
    i += 1
  return pop

"""# Decode Populasi"""

def decode(pop):
  # -1 <= x <=2 && -1 <= y <= 1
  # popul cannot be empty        **i mean its obvious if it empty why use this func haha
  populDecoded = [] # list of decoded population will save here
  x, y = 0.0, 0.0
  i, sigma = 0, 0
  while i < len(pop):
    decoded = [] # the x, y will saved here
    temp = pop[i]
    z, b, a = 0, 0, 0
    while z < len(pop[i]):
      if z < len(pop[i]) / 2:
        a = a + temp[z] * 2** - (z + 1)
        sigma += 2 ** - (z + 1)
      else:
          b = b + temp[z] * 2** - (z + 1)
          z = z + 1
      z += 1
    x = -100 + (100 - (-100) / sigma) *a
    y = -100 + (100 - (-100) / sigma) *b
    decoded.append(x)
    decoded.append(y)
    populDecoded.append(decoded)
    i += 1
    
  return populDecoded

"""# Fitness"""

def fitness(populDecoded):
  temp = []
  fitness = []
  i = 0
  while i < len(populDecoded):
    temp = populDecoded[i]
    j = 0
    x = 0
    while j < len(temp):
      if j == 0 :
        x = temp[j]
      else:
        y = temp[j]
      j+= 1
    a = x - y
    score = fitness_score(a,lst)
    fitness.append(score)
    i+= 1
  return fitness

def fitness_score(a, lst):
  temp = []
  score = 0
  i = 0
  while i < 50:
    temp = lst[i]
    score = score + a * temp
    i+= 1
  return score

"""# Parent Selection"""

def parentSelection(fitness):
  parent = []
  sort = sorted(fitness)
  best = sort[len(sort)-1]
  secBest =  sort[len(sort)-2]

  counterIndex = 0
  for i in fitness:
    if i == best or i == secBest:
      parent.append(counterIndex)
    counterIndex += 1

  
  return parent #return indeks parent

"""# Crossover"""

def crossover(parent, pop):
  
  coResult = [] # result of the crossover

  s1 = pop[parent[0]]
  s2 = pop[parent[1]]
  coResult.append(s1[0:3] + s2[3:6]) 
  coResult.append(s2[0:3] + s1[3:6]) 

  return coResult

"""# Mutation"""

def mutation(coResult):
  # coResult != 0
  # bit string mutation
  # flip bit(**not yet**)
  # probability = 0.01
  prob = 0.01
  mut = coResult
  i = 0
  changeCounter = 0

  while i < len(mut):
    j = 0
    while j < len(mut[i]):
      randProb = round(random.uniform(0.00, 1.00), 2)
      if randProb < float(prob):
        changeCounter += 1
        if mut[i][j] == 1:
          mut[i][j] = 0
        else:
          mut[i][j] = 1
      j += 1
    i += 1
  print("memiliki", changeCounter, "perubahan")
  
  return mut

"""# General Replacement"""

def replacement(crossover, popsize):
  temp = []
  size = popsize - len(crossover)
  pop = population(size)
  i=0
  j=0
  while i < len(crossover):
    temp.append(crossover[i])
    temp.append(pop[i])
    i+=1 
  return temp

"""# Main Function"""

popsize = 50
pop = population(popsize)
populDecoded = decode(pop)
fitnessScore= fitness(populDecoded)
parent= parentSelection(fitnessScore)
print(pop)
print(fitness(populDecoded))
print(parent)
print(crossover(parent, pop))
print(mutation(crossover(parent, pop)))
print(replacement(crossover(parent, pop), popsize))